自动配置原理？
	这个场景SpringBoot为我们配置了什么？能不能修改？能修改那些配置？能不能扩展？等等..
	xxxAutoConfiguration 都是帮我们给容器中自动配置组件
	xxxxProperties 配置类中来封装配置文件的内容

SpringBoot对静态资源的映射规则：
	使用这个配置：WebMvcAutoConfiguration 中的 addResourceHandlers(添加资源映射)
	public void addResourceHandlers(ResourceHandlerRegistry registry) {
      if (!this.resourceProperties.isAddMappings()) {
                logger.debug("Default resource handling disabled");
            } else {
                Duration cachePeriod = this.resourceProperties.getCache().getPeriod();
                CacheControl cacheControl = this.resourceProperties.getCache().getCachecontrol().toHttpCacheControl();
                if (!registry.hasMappingForPattern("/webjars/**")) {
                    this.customizeResourceHandlerRegistration(registry.addResourceHandler(new String[]{"/webjars/**"})
		.addResourceLocations(new String[]{"classpath:/META-INF/resources/webjars/"})
			.setCachePeriod(this.getSeconds(cachePeriod))
				.setCacheControl(cacheControl));
                }

                String staticPathPattern = this.mvcProperties.getStaticPathPattern();
                if (!registry.hasMappingForPattern(staticPathPattern)) {
                    this.customizeResourceHandlerRegistration(
		registry.addResourceHandler(new String[]{staticPathPattern})
			.addResourceLocations(
				WebMvcAutoConfiguration
					.getResourceLocations(
						this.resourceProperties
							.getStaticLocations()))
		.setCachePeriod(this.getSeconds(cachePeriod)).setCacheControl(cacheControl));
                }

            }
        }
-----------------------------------------------
		以webjars的方式导入静态资源：访问webjars网站，可以将jquery.js、bootstrap.js 这种 静态资源使用maven以jar包的形式导入项目
		想要要在服务器中访问静态资源输入 localhost:8080/webjars/bootstrap/4.3.1/css/bootstrap.css
		在maven中引用：
		<!--引入bootstrap-->
		        <dependency>
		            <groupId>org.webjars</groupId>
		            <artifactId>bootstrap</artifactId>
		            <version>4.3.1</version>
		        </dependency>
	               <!-- 引入jquery-->
		        <dependency>
		            <groupId>org.webjars</groupId>
		            <artifactId>jquery</artifactId>
		            <version>3.4.1</version>
		        </dependency>

		访问当前项目的任何资源，如果没有处理就会去这几个地方找资源：
			"classpath:/META-INF/resources/",
			"classpath:/resources/",
			"classpath:/static/",
			"classpath:/public/",
			"/" 
-----------------------------------------------
		几个比较重要的访问地址：
			"/webjars/**",都去classpath:/META-INF/resources/webjars/找资源（类如 jquery）
			"/**":访问当前项目的任何资源(静态资源)
			静态资源下的index.html页面；被"/**"映射；输入 localhost:8080 会默认自动找欢迎界面
			所有的**/favicon.ico 都是在静态资源文件下找
		如果我想改变静态文件的访问路径，也是可以在application.properties中配置 如 ：spring.resources.static-locations=classpath:/hello,classpath:/fw 多个路径使用 ，分割

模板引擎：
	jsp Velocity Freemarker Thymeleaf 等都是模板引擎
	SpringBoot推荐使用Thymeleaf ，语法简单，功能强大
	引入 Thymeleaf 的starter:
	        <dependency>
	            <groupId>org.springframework.boot</groupId>
	            <artifactId>spring-boot-starter-thymeleaf</artifactId>
	        </dependency>

	可以查看 spring-boot-autoconfigure 里面查看关于 Thymeleaf 的一些默认配置信息，并可以依据他的配置信息来改变默认配置
这是一部分默认的配置
@ConfigurationProperties(
    prefix = "spring.thymeleaf"
)
public class ThymeleafProperties {
    private static final Charset DEFAULT_ENCODING;
    public static final String DEFAULT_PREFIX = "classpath:/templates/";
    public static final String DEFAULT_SUFFIX = ".html";
    private boolean checkTemplate = true;
    private boolean checkTemplateLocation = true;
    private String prefix = "classpath:/templates/";
    private String suffix = ".html";
    private String mode = "HTML";
		默认的前缀 & 后缀
		DEFAULT_PREFIX = "classpath:/templates/";
		DEFAULT_SUFFIX = ".html";
		将html文件放在classpath:/templates/ 下，视图解析器就会自动解析以.html结尾的文件
		在 controller 中直接返回一个视图，就会在classpath:/templates/寻找是否存在 

thymeleaf语法：
	th:text: 改变当前元素内的文本内容
	th:[这里可以写标签的一些属性，如 id、class等属性]

Simple expressions:
	Variable Expressions: ${...} ：获取变量值；实际上就是OGNL；
		1）、获取对象的属性、掉用方法
		2）、使用内置的基本对象
			#ctx : the context object.  当前上下文
			#vars: the context variables. 当前上下文里面的变量
			#locale : the context locale. 局域信息
			#request : (only in Web Contexts 如果书 web 环境) the HttpServletRequest object. 
			#response : (only in Web Contexts) the HttpServletResponse object. 
			#session : (only in Web Contexts) the HttpSession object. 
			#servletContext : (only in Web Contexts) the ServletContext object.

	Selection Variable Expressions: *{...} 
	Message Expressions: #{...} 
	Link URL Expressions: @{...} 
	Fragment Expressions: ~{...}
Literals
	Text literals: 'one text' , 'Another one!' ,… 
	Number literals: 0 , 34 , 3.0 , 12.3 ,… 
	Boolean literals: true , false 
	Null literal: null Literal tokens: one , sometext , main ,…
Text operations:
String concatenation: + Literal substitutions: |The name is ${name}|
Arithmetic operations:
Binary operators: + , - , * , / , % Minus sign (unary operator): 
Boolean operations:
Binary operators: and , or Boolean negation (unary operator): ! , not
Comparisons and equality:
Comparators: > , < , >= , <= ( gt , lt , ge , le ) Equality operators: == , != ( eq , ne )
Conditional operators:
If-then: (if) ? (then) If-then-else: (if) ? (then) : (else) Default: (value) ?: (defaultvalue)

















